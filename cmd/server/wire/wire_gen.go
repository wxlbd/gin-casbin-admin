// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"gin-casbin-admin/internal/handler"
	"gin-casbin-admin/internal/repository"
	"gin-casbin-admin/internal/server"
	"gin-casbin-admin/internal/service"
	"gin-casbin-admin/pkg/app"
	"gin-casbin-admin/pkg/casbin"
	"gin-casbin-admin/pkg/jwt"
	"gin-casbin-admin/pkg/log"
	"gin-casbin-admin/pkg/server/http"
	"gin-casbin-admin/pkg/sid"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	db := repository.NewDB(viperViper, logger)
	enforcer, err := casbin.NewCasbinEnforcer(viperViper, db)
	if err != nil {
		return nil, nil, err
	}
	handlerHandler := handler.NewHandler(logger)
	universalClient := repository.NewRedis(viperViper)
	repositoryRepository := repository.NewRepository(logger, db, universalClient)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := repository.NewUserRepository(repositoryRepository)
	tokenRepository := repository.NewTokenRepository(repositoryRepository)
	userService := service.NewUserService(serviceService, userRepository, tokenRepository, enforcer, viperViper)
	adminUserHandler := handler.NewUserHandler(handlerHandler, userService, enforcer)
	permissionsRepository := repository.NewPermissionsRepository(repositoryRepository)
	permissionsService := service.NewPermissionsService(serviceService, permissionsRepository)
	permissionHandler := handler.NewPermissionHandler(handlerHandler, permissionsService)
	roleRepository := repository.NewRoleRepository(repositoryRepository)
	roleService := service.NewRoleService(serviceService, roleRepository, permissionsRepository, enforcer)
	roleHandler := handler.NewRoleHandler(handlerHandler, roleService)
	store := repository.NewCaptchaRepository(repositoryRepository)
	captchaService := service.NewCaptchaService(store)
	captchaHandler := handler.NewCaptchaHandler(handlerHandler, captchaService)
	httpServer := server.NewHTTPServer(logger, viperViper, jwtJWT, enforcer, adminUserHandler, permissionHandler, roleHandler, captchaHandler)
	job := server.NewJob(logger)
	appApp := newApp(httpServer, job)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRedis, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository, repository.NewPermissionsRepository, repository.NewRoleRepository, repository.NewCaptchaRepository, repository.NewTokenRepository)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService, service.NewPermissionsService, service.NewRoleService, service.NewCaptchaService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler, handler.NewPermissionHandler, handler.NewRoleHandler, handler.NewCaptchaHandler)

var serverSet = wire.NewSet(server.NewHTTPServer, server.NewJob)

// build App
func newApp(
	httpServer *http.Server,
	job *server.Job,

) *app.App {
	return app.NewApp(app.WithServer(httpServer, job), app.WithName("demo-server"))
}
